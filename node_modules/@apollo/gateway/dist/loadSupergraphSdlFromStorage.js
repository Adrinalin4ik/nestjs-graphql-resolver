"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSupergraphSdlFromStorage = exports.SUPERGRAPH_SDL_QUERY = void 0;
exports.SUPERGRAPH_SDL_QUERY = `#graphql
  query SupergraphSdl($apiKey: String!, $ref: String!) {
    routerConfig(ref: $ref, apiKey: $apiKey) {
      __typename
      ... on RouterConfigResult {
        id
        supergraphSdl: supergraphSDL
      }
      ... on FetchError {
        code
        message
      }
    }
  }
`;
const { name, version } = require('../package.json');
const fetchErrorMsg = "An error occurred while fetching your schema from Apollo: ";
async function loadSupergraphSdlFromStorage({ graphId, graphVariant, apiKey, endpoint, fetcher, }) {
    var _a, _b;
    let result;
    try {
        result = await fetcher(endpoint, {
            method: 'POST',
            body: JSON.stringify({
                query: exports.SUPERGRAPH_SDL_QUERY,
                variables: {
                    ref: `${graphId}@${graphVariant}`,
                    apiKey,
                },
            }),
            headers: {
                'apollographql-client-name': name,
                'apollographql-client-version': version,
                'user-agent': `${name}/${version}`,
                'content-type': 'application/json',
            },
        });
    }
    catch (e) {
        throw new Error(fetchErrorMsg + ((_a = e.message) !== null && _a !== void 0 ? _a : e));
    }
    let response;
    if (result.ok || result.status === 400) {
        try {
            response = await result.json();
        }
        catch (e) {
            throw new Error((_b = fetchErrorMsg + result.status + ' ' + e.message) !== null && _b !== void 0 ? _b : e);
        }
        if ('errors' in response) {
            throw new Error([fetchErrorMsg, ...response.errors.map((error) => error.message)].join('\n'));
        }
    }
    else {
        throw new Error(fetchErrorMsg + result.status + ' ' + result.statusText);
    }
    const { routerConfig } = response.data;
    if (routerConfig.__typename === 'RouterConfigResult') {
        const { id, supergraphSdl, } = routerConfig;
        return { id, supergraphSdl: supergraphSdl };
    }
    else if (routerConfig.__typename === 'FetchError') {
        const { code, message } = routerConfig;
        throw new Error(`${code}: ${message}`);
    }
    else {
        throw new Error('Programming error: unhandled response failure');
    }
}
exports.loadSupergraphSdlFromStorage = loadSupergraphSdlFromStorage;
//# sourceMappingURL=loadSupergraphSdlFromStorage.js.map